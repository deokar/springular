
ext {
  libs = [
     test: [
        'junit:junit:4.11',
        'org.hamcrest:hamcrest-all:1.3',
        'org.assertj:assertj-core:1.5.0',
        'org.mockito:mockito-all:1.9.5',
        'com.jayway.jsonpath:json-path:0.9.1',
        'org.springframework:spring-test:4.0.1.RELEASE'
     ]
  ]
}

buildscript {
   repositories {
      mavenLocal()
      maven { 
         url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins'
      }
      maven {
         url 'http://repo1.maven.org/maven2'
      }
      maven { 
         url "http://repo.spring.io/libs-snapshot" 
      }
      maven { 
         url "http://maven-repository.com/" 
      }
   }
}

allprojects {
   repositories {
      mavenCentral()
      maven { 
         url "http://repo.spring.io/libs-snapshot" 
      }
   }
}

project(':server.api') {

   apply plugin: 'java'
   apply plugin: 'eclipse-wtp'

   sourceCompatibility = 1.6
   targetCompatibility = 1.6

   sourceSets {
      generated
   }

   sourceSets.generated.java.srcDirs = ['src/main/generated']

   configurations {    
      queryDsl
   }

   task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
      source = sourceSets.main.java
      classpath = configurations.compile + configurations.queryDsl
      options.compilerArgs = [
         "-proc:only",
         "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
      ]
      destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
   }

   compileJava {
      dependsOn generateQueryDSL
      source generateQueryDSL.destinationDir
   }

   eclipse.project {
      natures 'org.springsource.ide.eclipse.gradle.core.nature'
      natures 'org.eclipse.jdt.groovy.core.groovyNature'
      natures 'org.springframework.ide.eclipse.core.springnature'
   }

   dependencies {
      queryDsl 'com.mysema.querydsl:querydsl-apt:3.3.1'
      compile 'com.mysema.querydsl:querydsl-jpa:3.3.1'

      compile 'com.google.guava:guava:16.0.1'

      compile 'org.hibernate:hibernate-validator:4.3.1.Final'

      compile 'org.aspectj:aspectjrt:1.7.4'
      compile 'org.aspectj:aspectjweaver:1.7.4'
      compile 'org.springframework:spring-aop:4.0.1.RELEASE'
      compile 'org.springframework:spring-context:4.0.1.RELEASE'

      compile 'org.hsqldb:hsqldb:2.3.2'

      compile 'org.hibernate:hibernate-entitymanager:4.3.3.Final'
      compile 'org.springframework.data:spring-data-jpa:1.5.0.RELEASE'

      testCompile libs.test
   }

}

project(':server.rest') {

   apply plugin: 'java'
   apply plugin: 'eclipse-wtp'

   sourceCompatibility = 1.6
   targetCompatibility = 1.6

   eclipse.project {
      natures 'org.springsource.ide.eclipse.gradle.core.nature'
      natures 'org.eclipse.jdt.groovy.core.groovyNature'
      natures 'org.springframework.ide.eclipse.core.springnature'
   }

   dependencies {
      compile project(':server.api')

      compile 'com.google.guava:guava:16.0.1'

      compile 'org.springframework:spring-webmvc:4.0.1.RELEASE'

      compile 'com.fasterxml.jackson.core:jackson-core:2.3.0'
      compile 'com.fasterxml.jackson.core:jackson-databind:2.3.0'

      compile 'org.apache.tomcat:tomcat-servlet-api:7.0.42'

      compile 'org.springframework.security:spring-security-core:3.2.0.RELEASE'
      compile 'org.springframework.security:spring-security-web:3.2.0.RELEASE'
      compile 'org.springframework.security:spring-security-config:3.2.0.RELEASE'

      testCompile libs.test
   }
}

project(':server.war') {
   apply plugin: 'war'
   apply plugin: 'eclipse-wtp'

   war {
      baseName = 'angular-rest'
   }

   dependencies {
      compile project(':server.rest')

      providedCompile 'org.apache.tomcat:tomcat-servlet-api:7.0.42'
   }
}


project(':server.webapp') {

   apply plugin: 'war'
   apply plugin: 'eclipse-wtp'

   war {
      baseName = 'angular-webapp'
   }
}

project(':springular.ear') {

   apply plugin: 'ear'

   ear {
      baseName = 'springular'
    
      dependsOn(":server.war:war")
      dependsOn(":server.webapp:war")
   }

   dependencies {
      deploy project(path: ':server.war', configuration: 'archives')
      deploy project(path: ':server.webapp', configuration: 'archives')
   }

}
